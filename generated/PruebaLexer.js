// Generated from Prueba.g4 by ANTLR 4.13.2
// jshint ignore: start
import antlr4 from 'antlr4';


const serializedATN = [4,0,11,103,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,
4,7,4,2,5,7,5,2,6,7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,
12,2,13,7,13,2,14,7,14,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,1,1,1,1,1,1,1,1,
1,1,1,1,1,1,1,1,1,1,1,1,2,1,2,1,2,1,2,1,2,1,2,1,3,1,3,1,4,1,4,1,5,1,5,1,
6,1,6,1,7,4,7,65,8,7,11,7,12,7,66,1,8,1,8,1,8,1,8,1,8,5,8,74,8,8,10,8,12,
8,77,9,8,1,8,1,8,1,9,1,9,1,10,1,10,1,11,1,11,1,12,1,12,1,13,1,13,1,13,5,
13,92,8,13,10,13,12,13,95,9,13,1,14,4,14,98,8,14,11,14,12,14,99,1,14,1,14,
0,0,15,1,1,3,2,5,3,7,4,9,5,11,6,13,7,15,8,17,9,19,0,21,0,23,0,25,0,27,10,
29,11,1,0,4,1,0,48,57,2,0,65,90,97,122,6,0,33,33,39,39,44,44,46,46,58,59,
63,63,3,0,9,10,12,13,32,32,106,0,1,1,0,0,0,0,3,1,0,0,0,0,5,1,0,0,0,0,7,1,
0,0,0,0,9,1,0,0,0,0,11,1,0,0,0,0,13,1,0,0,0,0,15,1,0,0,0,0,17,1,0,0,0,0,
27,1,0,0,0,0,29,1,0,0,0,1,31,1,0,0,0,3,39,1,0,0,0,5,49,1,0,0,0,7,55,1,0,
0,0,9,57,1,0,0,0,11,59,1,0,0,0,13,61,1,0,0,0,15,64,1,0,0,0,17,68,1,0,0,0,
19,80,1,0,0,0,21,82,1,0,0,0,23,84,1,0,0,0,25,86,1,0,0,0,27,88,1,0,0,0,29,
97,1,0,0,0,31,32,5,117,0,0,32,33,5,115,0,0,33,34,5,117,0,0,34,35,5,97,0,
0,35,36,5,114,0,0,36,37,5,105,0,0,37,38,5,111,0,0,38,2,1,0,0,0,39,40,5,118,
0,0,40,41,5,101,0,0,41,42,5,114,0,0,42,43,5,100,0,0,43,44,5,97,0,0,44,45,
5,100,0,0,45,46,5,101,0,0,46,47,5,114,0,0,47,48,5,111,0,0,48,4,1,0,0,0,49,
50,5,102,0,0,50,51,5,97,0,0,51,52,5,108,0,0,52,53,5,115,0,0,53,54,5,111,
0,0,54,6,1,0,0,0,55,56,5,61,0,0,56,8,1,0,0,0,57,58,5,59,0,0,58,10,1,0,0,
0,59,60,5,40,0,0,60,12,1,0,0,0,61,62,5,41,0,0,62,14,1,0,0,0,63,65,7,0,0,
0,64,63,1,0,0,0,65,66,1,0,0,0,66,64,1,0,0,0,66,67,1,0,0,0,67,16,1,0,0,0,
68,75,5,39,0,0,69,74,3,19,9,0,70,74,3,21,10,0,71,74,3,25,12,0,72,74,3,23,
11,0,73,69,1,0,0,0,73,70,1,0,0,0,73,71,1,0,0,0,73,72,1,0,0,0,74,77,1,0,0,
0,75,73,1,0,0,0,75,76,1,0,0,0,76,78,1,0,0,0,77,75,1,0,0,0,78,79,5,39,0,0,
79,18,1,0,0,0,80,81,7,1,0,0,81,20,1,0,0,0,82,83,7,0,0,0,83,22,1,0,0,0,84,
85,7,2,0,0,85,24,1,0,0,0,86,87,5,32,0,0,87,26,1,0,0,0,88,93,3,19,9,0,89,
92,3,19,9,0,90,92,3,21,10,0,91,89,1,0,0,0,91,90,1,0,0,0,92,95,1,0,0,0,93,
91,1,0,0,0,93,94,1,0,0,0,94,28,1,0,0,0,95,93,1,0,0,0,96,98,7,3,0,0,97,96,
1,0,0,0,98,99,1,0,0,0,99,97,1,0,0,0,99,100,1,0,0,0,100,101,1,0,0,0,101,102,
6,14,0,0,102,30,1,0,0,0,7,0,66,73,75,91,93,99,1,6,0,0];


const atn = new antlr4.atn.ATNDeserializer().deserialize(serializedATN);

const decisionsToDFA = atn.decisionToState.map( (ds, index) => new antlr4.dfa.DFA(ds, index) );

export default class PruebaLexer extends antlr4.Lexer {

    static grammarFileName = "Prueba.g4";
    static channelNames = [ "DEFAULT_TOKEN_CHANNEL", "HIDDEN" ];
	static modeNames = [ "DEFAULT_MODE" ];
	static literalNames = [ null, "'usuario'", "'verdadero'", "'falso'", "'='", 
                         "';'", "'('", "')'" ];
	static symbolicNames = [ null, "USUARIO", "VERDADERO", "FALSO", "IGUAL", 
                          "SEMI", "LPAREN", "RPAREN", "NUMERO", "STRING", 
                          "ID", "WS" ];
	static ruleNames = [ "USUARIO", "VERDADERO", "FALSO", "IGUAL", "SEMI", 
                      "LPAREN", "RPAREN", "NUMERO", "STRING", "LETRA", "DIGITO", 
                      "SIMBOLO", "ESPACIO", "ID", "WS" ];

    constructor(input) {
        super(input)
        this._interp = new antlr4.atn.LexerATNSimulator(this, atn, decisionsToDFA, new antlr4.atn.PredictionContextCache());
    }
}

PruebaLexer.EOF = antlr4.Token.EOF;
PruebaLexer.USUARIO = 1;
PruebaLexer.VERDADERO = 2;
PruebaLexer.FALSO = 3;
PruebaLexer.IGUAL = 4;
PruebaLexer.SEMI = 5;
PruebaLexer.LPAREN = 6;
PruebaLexer.RPAREN = 7;
PruebaLexer.NUMERO = 8;
PruebaLexer.STRING = 9;
PruebaLexer.ID = 10;
PruebaLexer.WS = 11;



